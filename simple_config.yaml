config_version: 'v8'

model_comment: 'cohort_past12m_visits_label1yr_newfeatures_testing_clean'
random_seed: 173

temporal_config:

    feature_start_time: '1900-01-01'
    feature_end_time: '2021-12-31'

    label_start_time: '2014-01-01'
    label_end_time: '2021-12-31' 

    model_update_frequency: '3year'

    # length of time defining a test set
    test_durations: ['1year']
    # defines how far back a training set reaches
    max_training_histories: ['5year'] 

    training_as_of_date_frequencies: ['1year'] 
    test_as_of_date_frequencies: ['1year']
    
    label_timespans: ['1year']

# change later to any event in the last x months and refine pre-ckd criteria
# using presence of eGFR or medication or other things

# COHORT CONFIG
# Cohorts are configured by passing a query with placeholders for the 'as_of_date'.
#
# You may pass a relative filepath to a cohort query to the 'filepath' key (preferred) or use the 'query' key to include the a cohort query directly in the config
# Cohort queries should return a column named 'entity_id' and be parameterized with an '{as_of_date}', to select the entity_ids that should be included for a given date. The {as_of_date} will be replaced with each as_of_date that the experiment needs. The returned 'entity_id' must be an integer.
#
# You may enter a 'name' for your configuration.
# This will be included in the metadata for each matrix and used to group models
# If you don't pass one, the string 'default' will be used.
#
# This block is completely optional. If you don't specify it
# it will default to all of the entities for which there are labels.
# The name by default in this case will be 'all_entities'
# cohort_config:
#    filepath: 'example/cohort/past_events.sql'
#    name: 'past_events'


# LABEL GENERATION
# Labels are configured with a query with placeholders for the 'as_of_date' and 'label_timespan'. You can include a local path to a sql file containing the label query to the 'filepath' key (preferred) or include the query in the 'query' key
#
# The query must return two columns: entity_id and outcome, based on a given as_of_date and label_timespan.
# The as_of_date and label_timespan must be represented by placeholders marked by curly brackets. The example below
# reproduces the inspection outcome boolean-or logic:
#
# In addition, you can configure what label is given to entities that are in the matrix
#   (see 'cohort_config' section) but that do not show up in this label query.
# By default, these will show up as missing/null.
# However, passing the key 'include_missing_labels_in_train_as' allows you to pick True or False.
#
# In addition to these configuration options, you can pass a name to apply to the label configuration
# that will be present in matrix metadata for each matrix created by this experiment,
# under the 'label_name' key. The default label_name is 'outcome'.

# label (who is included in the cohort on a given date): 
# 1 = everyone who had an abnormal egfr in the next x years
# 0 = everyone who only had normal egfr(s) in the next x years
# null/unknown: no egfrds in the next x time


label_config:
  query: |

    SELECT enc.entity_id,   
    max(CASE when abnormal_sum > 0 then 1 
    when abnormal_sum = 0 then 0
    else NULL end) as outcome
    from raw.cohort_encounters enc 
   
    left join 

    (select entity_id from raw.egfr  where event_dttm  <  '{as_of_date}'::date
    and normal_abnormal_result = 'a') abnormal_egfr on enc.entity_id=abnormal_egfr.entity_id

    left join (select entity_id from raw.derived_cohort_conditions_ckd 
    where event_dttm  <  '{as_of_date}'::date ) previous_ckd
    on enc.entity_id=previous_ckd.entity_id
    left join (select entity_id, 
    sum(case when normal_abnormal_result = 'a' then 1 else 0 end) as abnormal_sum,
    sum(case when normal_abnormal_result = 'n' then 1 else 0 end) as normal_sum,
    count(*) as egfr_count
    from raw.egfr
    where event_dttm  >  '{as_of_date}'::date
    and event_dttm  <  '{as_of_date}'::date + interval '{label_timespan}'
    group by entity_id
    ) future_egfr on enc.entity_id=future_egfr.entity_id
    where
    -- visited in the last year
    VISIT_ADMIT_DTTM >  '{as_of_date}'::date - interval '1year' 
    and VISIT_ADMIT_DTTM <  '{as_of_date}'::date
    -- and do not have an abnormal egfr in the past 
    and abnormal_egfr.entity_id is null 
    -- and do not havea ckd diagnosis in the past
    and previous_ckd.entity_id is null
    group by enc.entity_id 

  # include_missing_labels_in_train_as: false
  name: 'had_abnormal_egfr_within_12months_for_cohort_12m_no_egfrckd'

feature_aggregations:
  -
    prefix: 'demos'
    from_obj: 'raw.cohort_demographics_dob'
    knowledge_date_column: 'date_of_birth'

    aggregates_imputation:
      all:
        type: 'mean'

    categoricals_imputation:
      all:
        type: 'null_category'    

    categoricals:
      -
        column: 'gender'
        metrics:
          - 'max' 
        choices: [Female, Male]
      -
        column: 'race'
        metrics:
          - 'max' 
        choice_query: 'select distinct race from raw.cohort_demographics_dob'
      -
        column: 'ethnicity'
        metrics:
          - 'max' 
        choice_query: 'select distinct ethnicity from raw.cohort_demographics_dob'
      -
        column: 'marital_status'
        metrics:
          - 'max' 
        choice_query: 'select distinct marital_status from raw.cohort_demographics_dob'

    aggregates:
      - # age in years
        quantity:
          age: "extract(year from age('{collate_date}'::date,  date_of_birth::date))"
        metrics:
          - 'max'
   

    intervals: ['all']
    groups: ['entity_id']

  -
    prefix: 'egfrs'
    from_obj: 'raw.egfr'
    knowledge_date_column: 'event_dttm'

    aggregates_imputation:
            all:
                type: 'zero_noflag'

    aggregates:
    - # total number of past egfrs
      quantity:
        total: "*"
      metrics:
        - 'count'

    intervals: ['1month','3month', '6month', '12month','all']
    groups: ['entity_id']      

  -
    prefix: 'encounters'
    from_obj: 'raw.cohort_encounters'
    knowledge_date_column: 'visit_admit_dttm'

    aggregates_imputation:
            all:
                type: 'zero_noflag'

    aggregates:
    - # total number of past visits
      quantity:
        total: "*"
      metrics:
        - 'count'

    - # total number of past ER visits
      quantity:
        ed_visits: "case when lower(encounter_class) = 'emergency' then 1 else 0 end"
      metrics:
        - 'sum'

# model_grid_preset:  'quickstart' 
grid_config:

      'triage.component.catwalk.baselines.rankers.PercentileRankOneFeature':
        feature: ['egfrs_entity_id_all_total_count','demos_entity_id_all_age_max', 'conditions_entity_id_all_total_count']
        descend: [True]

      'sklearn.dummy.DummyClassifier':
        strategy: ['prior']
 
      'triage.component.catwalk.estimators.classifiers.ScaledLogisticRegression':
        penalty: ['l2', 'l1']
        C: [0.001, 0.01,0.1]
   
      'sklearn.tree.DecisionTreeClassifier':
        criterion: ['gini']
        max_depth: [1, 2, 5]
        min_samples_split: [5]

      'sklearn.ensemble.RandomForestClassifier':
        n_estimators: [100]
        criterion: ['gini']
        max_depth: [100]
        min_samples_split: [10]
        n_jobs: [-1]     

scoring:
    testing_metric_groups:
        -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1, 2, 3, 4, 5, 6, 7, 8, 9, 
                              10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                              20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
                              30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
                              40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                              50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                              60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
                              70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                              80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
                              90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
                              100]
            top_n: [100, 200, 500, 1000]
        -
          metrics: [roc_auc] 

    training_metric_groups:
      -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# # need to fix
#     subsets:
#       -
#           name: patients_with_egfrs_in_past_3m
#           query: |
#             SELECT DISTINCT entity_id
#             FROM raw.egfr where 
#             (event_dttm  <  '{as_of_date}'::date and 
#             event_dttm  >  ('{as_of_date}'::date - interval '3months')
            
#       -
#           name: patients_with_egfrs_in_past_3_to_6m
#           query: |
#             SELECT DISTINCT entity_id
#             FROM raw.cohort_encounters where 
#             (event_dttm  <  '{as_of_date}'::date - interval '3months' and 
#             event_dttm  >  ('{as_of_date}'::date - interval '6months')

bias_audit_config:
    from_obj_table: 'raw.cohort_demographics_dob'
    attribute_columns: ['gender', 'race']
    knowledge_date_column: 'date_of_birth'
    entity_id_column: 'entity_id'
    ref_groups_method: 'predefined'
    ref_groups:
        'gender': 'Male'
        'race': 'White'
    thresholds:
        percentiles: [1,5,10,20,50]
        top_n: [100,500]
